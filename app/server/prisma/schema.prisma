// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId            String            @id @default(uuid())
  email             String            @unique
  password          String
  firstname         String
  lastname          String
  isEmailVerified   Boolean           @default(false)
  isRoleActivated   Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  role              UserRole          @default(STUDENT)
  classes           UserInClass[]
  submissions       Submission[]
  reviewsDone       Review[]          @relation("Reviewer")
  reviewsRecieved   Review[]          @relation("Reviewee")
  classesInstructed Class[]           @relation("InstructorClasses")
  groups            Group[]
  RoleRequest       RoleRequest?
  enrollRequests    EnrollRequest[]
  notifications     Notification[]    @relation("ReceiverNotifications")
  sentNotifications Notification[]    @relation("SenderNotifications")
  GroupSubmission   GroupSubmission[]
  reports           Report[]          @relation("ReportReceiver")
  sentReports       Report[]          @relation("ReportSender")
  extendedDueDates  ExtendedDueDate[] @relation("UserExtendedDueDates")
  commentChains     CommentChain[]    @relation("StudentCommentChains")
  comments          Comment[]
  todos             Todo[]
}

model Class {
  classId       String          @id @default(uuid())
  instructorId  String
  classname     String
  description   String
  startDate     DateTime
  endDate       DateTime
  term          String?
  classSize     Int?            @default(5)
  groups        Group[]
  usersInClass  UserInClass[]
  Assignments   Assignment[]
  categories    Category[]
  instructor    User            @relation("InstructorClasses", fields: [instructorId], references: [userId], onDelete: Cascade) // Only one instructor per class 
  EnrollRequest EnrollRequest[]
  rubrics       Rubric[]
  todos         Todo[]
}

model UserInClass {
  userId  String
  classId String
  user    User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  class   Class  @relation(fields: [classId], references: [classId], onDelete: Cascade)

  @@id([userId, classId], name: "UserInClassId")
}

model Assignment {
  assignmentId          String            @id @default(uuid())
  classId               String
  rubricId              String?
  title                 String
  description           String?
  dueDate               DateTime
  maxSubmissions        Int               @default(1)
  isGroupAssignment     Boolean           @default(false)
  isPeerReviewAnonymous Boolean           @default(false)
  allowedFileTypes      String[]
  assignmentFilePath    String?
  classes               Class             @relation(fields: [classId], references: [classId], onDelete: Cascade)
  categoryId            String?
  category              Category?         @relation(fields: [categoryId], references: [categoryId])
  rubric                Rubric?           @relation(fields: [rubricId], references: [rubricId])
  submissions           Submission[]
  reviewOption          String?
  extendedDueDates      ExtendedDueDate[] @relation("AssignmentExtendedDueDates")
  commentChains         CommentChain[]
}

// Group Models

model Group {
  groupId          String       @id @default(uuid())
  classId          String
  groupName        String
  groupDescription String?
  // 
  groupSize        Int          @default(0)
  class            Class        @relation(fields: [classId], references: [classId], onDelete: Cascade)
  students         User[] // Students in the group
  submissions      Submission[] // Submissions from the group
}

model Submission {
  submissionId       String            @id @default(uuid())
  assignmentId       String
  submitterId        String
  submitterGroupId   String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  // submissionType     SubmissionType // Either a File or a URL, we need to discuss file storage options
  submissionFilePath String?
  finalGrade         Int? // Final grade of the Submission, default to the instructor grade?
  submissionComment  String?
  assignment         Assignment        @relation(fields: [assignmentId], references: [assignmentId], onDelete: Cascade)
  submitter          User              @relation(fields: [submitterId], references: [userId], onDelete: Cascade)
  submitterGroup     Group?            @relation(fields: [submitterGroupId], references: [groupId])
  reviews            Review[]
  GroupSubmission    GroupSubmission[]
}

model CommentChain {
  commentChainId String     @id @default(uuid())
  assignmentId   String
  studentId      String
  assignment     Assignment @relation(fields: [assignmentId], references: [assignmentId], onDelete: Cascade)
  student        User       @relation("StudentCommentChains", fields: [studentId], references: [userId], onDelete: Cascade)
  comments       Comment[]

  @@unique([assignmentId, studentId])
}

model Comment {
  commentId      String       @id @default(uuid())
  commentChainId String
  userId         String
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  commentChain   CommentChain @relation(fields: [commentChainId], references: [commentChainId], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model GroupSubmission {
  id           String     @id @default(uuid())
  submissionId String
  userId       String
  submission   Submission @relation(fields: [submissionId], references: [submissionId], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([submissionId, userId])
}

model Review {
  reviewId        String           @id @default(uuid())
  submissionId    String
  reviewerId      String
  revieweeId      String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  isPeerReview    Boolean          @default(false)
  reviewGrade     Int // Total grade of the review = sum of criterionGrades
  submission      Submission       @relation(fields: [submissionId], references: [submissionId], onDelete: Cascade)
  reviewer        User             @relation("Reviewer", fields: [reviewerId], references: [userId], onDelete: Cascade)
  reviewee        User             @relation("Reviewee", fields: [revieweeId], references: [userId], onDelete: Cascade)
  criterionGrades CriterionGrade[]
}

model Rubric {
  rubricId    String       @id @default(uuid())
  creatorId   String
  classId     String
  title       String
  description String?
  totalMarks  Int // Total marks of the rubric? Not sure if this is needed or not 
  criteria    Criterion[]
  assignments Assignment[]
  class       Class?       @relation(fields: [classId], references: [classId], onDelete: Cascade)
}

model Criterion {
  criterionId      String            @id @default(uuid())
  rubricId         String
  title            String
  maxMark          Int
  minMark          Int
  rubric           Rubric            @relation(fields: [rubricId], references: [rubricId], onDelete: Cascade)
  criterionRatings CriterionRating[]
  criterionGrades  CriterionGrade[]
}

model CriterionRating {
  criterionRatingId String    @id @default(uuid())
  criterionId       String
  description       String
  points            Int
  criterion         Criterion @relation(fields: [criterionId], references: [criterionId], onDelete: Cascade)
}

// Criterion Grade Models

model CriterionGrade {
  criterionGradeId String    @id @default(uuid())
  reviewId         String
  criterionId      String
  grade            Int
  comment          String? // Add this field for comments
  review           Review    @relation(fields: [reviewId], references: [reviewId], onDelete: Cascade)
  criterion        Criterion @relation(fields: [criterionId], references: [criterionId], onDelete: Cascade)

  @@unique([criterionId, reviewId], name: "UniqueCriteronGradePerReview") // Ensure unique combination of criterionId and reviewId
}

model RoleRequest {
  roleRequestId String        @id @default(uuid())
  userId        String
  roleRequested UserRole
  status        RequestStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId], name: "UniqueRoleRequestPerUser")
}

// Initial implementation - Abdul
model Notification {
  notificationId String   @id @default(uuid())
  receiverId     String
  title          String
  content        String
  senderId       String?
  type           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  seen           Boolean? @default(false)
  receiver       User     @relation("ReceiverNotifications", fields: [receiverId], references: [userId], onDelete: Cascade)
  sender         User?    @relation("SenderNotifications", fields: [senderId], references: [userId], onDelete: Cascade)
}

model EnrollRequest {
  enrollRequestId  String        @id @default(uuid())
  userId           String
  classId          String
  status           RequestStatus @default(PENDING)
  senderMessage    String?
  recipientMessage String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  class            Class         @relation(fields: [classId], references: [classId], onDelete: Cascade)

  @@unique([userId, classId], name: "UniqueEnrollRequestPerUser")
}

model Category {
  categoryId  String       @id @default(uuid())
  classId     String
  name        String
  class       Class        @relation(fields: [classId], references: [classId], onDelete: Cascade)
  assignments Assignment[]
}

model Report {
  reportId     String   @id @default(uuid())
  senderId     String
  receiverRole String
  receiverId   String?
  title        String   @default("No title")
  content      String   @default("No report contents")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isResolved   Boolean  @default(false)

  receiver User? @relation("ReportReceiver", fields: [receiverId], references: [userId], onDelete: Cascade)
  sender   User  @relation("ReportSender", fields: [senderId], references: [userId], onDelete: Cascade)
}

model ExtendedDueDate {
  extendedDueDateId String     @id @default(uuid())
  userId            String
  assignmentId      String
  newDueDate        DateTime
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  user              User       @relation("UserExtendedDueDates", fields: [userId], references: [userId], onDelete: Cascade)
  assignment        Assignment @relation("AssignmentExtendedDueDates", fields: [assignmentId], references: [assignmentId], onDelete: Cascade)

  @@unique([userId, assignmentId], name: "UniqueExtendedDueDatePerUserAssignment")
}

model Todo {
  todoId    String   @id @default(uuid())
  classId   String
  userId    String
  content   String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  class     Class    @relation(fields: [classId], references: [classId], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([classId, userId])
}

enum UserRole {
  INSTRUCTOR
  ADMIN
  STUDENT
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
}

enum SubmissionType {
  FILE
  URL
}

enum ReviewType {
  MANUAL
  AUTO
}
