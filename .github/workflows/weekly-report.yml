name: Weekly Report Automation

on:
  workflow_dispatch:
  schedule:
    - cron: '30 0 * * 5' # Runs at midnight every Friday
  issue_comment:
    types: [created]

jobs:
  weekly_report:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas matplotlib jq

      - name: Gather issues from the past 7 days
        id: gather_issues
        env:
          ISSUE_ASSIGN_DISCORD_GITHUB_TOKEN: ${{ secrets.ISSUE_ASSIGN_DISCORD_GITHUB_TOKEN }}
        run: |
          ISSUE_API_URL="https://api.github.com/repos/${{ github.repository }}/issues"
          ISSUES_JSON=$(curl -H "Authorization: token ${{ secrets.ISSUE_ASSIGN_DISCORD_GITHUB_TOKEN }}" -X GET "$ISSUE_API_URL?since=$(date -d '7 days ago' -u +'%Y-%m-%dT%H:%M:%SZ')&state=all")
          echo "::set-output name=issues::$ISSUES_JSON"

      - name: Debug Gathered Issues
        run: |
          echo "Gathered Issues: ${{ steps.gather_issues.outputs.issues }}"

      - name: Generate issue list view for each member
        id: generate_issue_list
        run: |
          issues='${{ steps.gather_issues.outputs.issues }}'
          echo "Issues JSON: $issues"
          declare -A member_issues

          for member in JoshFarwig mahirr476 Bhavya290223 namekeptanonymous; do
            member_issues[$member]=""
          done

          for row in $(echo "${issues}" | jq -r '.[] | @base64'); do
            _jq() {
              echo ${row} | base64 --decode | jq -r ${1}
            }

            assignees=$(_jq '.assignees[].login')
            title=$(_jq '.title')
            number=$(_jq '.number')

            for assignee in $assignees; do
              member_issues[$assignee]+="- #$number: $title\n"
            done
          done

          for member in "${!member_issues[@]}"; do
            echo -e "${member}:\n${member_issues[$member]}\n"
          done

          echo "::set-output name=member_issues::$(declare -p member_issues)"

      - name: Debug Member Issues
        run: |
          echo "Member Issues: ${{ steps.generate_issue_list.outputs.member_issues }}"

      - name: Send report to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.AUTO_LOG_DISCORD_WEBHOOK_URL }}
        run: |
          member_issues=$(echo '${{ steps.generate_issue_list.outputs.member_issues }}' | jq -r 'to_entries | map("\(.key): \(.value|tostring)") | .[]')

          # Constructing the Discord message
          message_content="**Weekly Report**\n\n"
          for member in JoshFarwig mahirr476 Bhavya290223 namekeptanonymous; do
            member_content=$(echo "$member_issues" | grep "^$member: " | cut -d' ' -f2-)
            message_content+="**$member**:\n$member_content\n"
          done

          echo "Message Content: $message_content"

          # Send the message to Discord
          response=$(curl -w "%{http_code}" -H "Content-Type: application/json" \
            -X POST \
            -d '{
              "username": "Github Actions",
              "content": "'"${message_content//$'\n'/'\n'}"'"
            }' \
            $DISCORD_WEBHOOK_URL)
          http_code=$(tail -n1 <<< "$response")
          echo "HTTP Response Code: $http_code"
          echo "Response: ${response::-3}"  # Remove the HTTP code from the response for logging
